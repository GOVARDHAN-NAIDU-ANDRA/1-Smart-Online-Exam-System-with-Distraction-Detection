<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Concentration Tracker + Exam</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body.light {
      background: #f4f4f4;
      color: #222;
    }

    body.dark {
      background: #1b1b3a;
      color: #eee;
    }

    .container {
      display: flex;
      justify-content: space-between;
      padding: 20px;
      gap: 20px;
    }

    .exam-area {
      flex: 2;
      max-width: 70%;
    }

    .exam-area h2 {
      margin-top: 0;
    }

    .question {
      margin-bottom: 20px;
      padding: 10px;
      border-bottom: 1px solid #ccc;
    }

    .question h3 {
      margin-bottom: 10px;
    }

    .camera-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .video-frame {
      border: 5px solid #444;
      border-radius: 10px;
      width: 300px;
      max-width: 100%;
      box-shadow: 0 0 15px rgba(0,0,0,0.4);
    }

    .btn {
      padding: 10px 14px;
      margin: 5px;
      font-size: 15px;
      font-weight: bold;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      width: 200px;
    }

    .btn-toggle { background: #28a745; color: white; }
    .btn-save   { background: #007bff; color: white; }
    .btn-report { background: #6c757d; color: white; }
    .btn-theme  { background: #ffc107; color: black; }
    .btn-submit { background: #dc3545; color: white; }

    #alert-banner {
      display: none;
      position: fixed;
      top: 0;
      width: 100%;
      text-align: center;
      z-index: 9999;
    }

    #alert-text {
      background: red;
      color: white;
      padding: 12px;
      font-weight: bold;
      font-size: 18px;
    }

    .correct-answer {
      color: green;
      font-weight: bold;
    }

    .wrong-answer {
      color: red;
      font-weight: bold;
    }

    #result {
      font-size: 18px;
      font-weight: bold;
      margin-top: 20px;
    }

    #timer {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 10px;
      color: #dc3545;
    }
  </style>
</head>
<body class="light">

  <div id="alert-banner">
    <div id="alert-text"></div>
  </div>

  <div class="container">
    <!-- Exam Section -->
    <div class="exam-area">
      <h2>üìù Online Proctored Exam</h2>
      <div id="timer">Time Left: 05:00</div>
      <form id="examForm" onsubmit="return gradeExam();">
        <div id="questions"></div>
        <button class="btn btn-submit" type="submit">‚úÖ Submit Exam</button>
      </form>
      <div id="result"></div>
    </div>

    <!-- Camera + Controls -->
    <div class="camera-section">
      <img src="{{ url_for('video_feed') }}" class="video-frame" id="camera" />
      <button class="btn btn-toggle" onclick="toggleDetection()" id="toggle-btn">Turn On Detection</button>
      <button class="btn btn-save" onclick="saveLog()">üíæ Save Session</button>
      <a href="/report" class="btn btn-report">üìä Weekly Report</a>
      <button class="btn btn-theme" onclick="toggleTheme()">üåì Theme</button>
    </div>
  </div>

  <script>
    let detectionOn = false;
    let submitted = false;
    let timerInterval;

    const quizData = [
      { q: "1. Capital of India?", a: ["Mumbai", "Delhi", "Bangalore", "Hyderabad"], correct: 1 },
      { q: "2. FIFO structure?", a: ["Stack", "Queue", "Tree", "Graph"], correct: 1 },
      { q: "3. CPU means?", a: ["Core Unit", "Central Process", "Central Processing Unit", "Computer Processing"], correct: 2 },
      { q: "4. Father of Computer?", a: ["Turing", "Newton", "Babbage", "Elon Musk"], correct: 2 },
      { q: "5. HTML link tag?", a: ["<link>", "<a>", "<url>", "<connect>"], correct: 1 },
      { q: "6. Red Planet?", a: ["Venus", "Mars", "Jupiter", "Saturn"], correct: 1 },
      { q: "7. Largest mammal?", a: ["Elephant", "Blue Whale", "Giraffe", "Rhino"], correct: 1 },
      { q: "8. Java is:", a: ["Compiled", "Interpreted", "Both", "None"], correct: 2 },
      { q: "9. 1 byte = ?", a: ["8 bits", "4 bits", "1024 bits", "1 bit"], correct: 0 },
      { q: "10. RAM stands for?", a: ["Random Access Memory", "Read And Modify", "Run Any Machine", "Rapid Access Mem"], correct: 0 },
      { q: "11. OS means?", a: ["Open Source", "Operating System", "Office Suite", "Online Service"], correct: 1 },
      { q: "12. 2 + 2 * 2 = ?", a: ["6", "8", "4", "10"], correct: 0 },
      { q: "13. Secure protocol?", a: ["HTTP", "FTP", "HTTPS", "TCP"], correct: 2 },
      { q: "14. URL full form?", a: ["User Ref Link", "Unified Resource Locator", "Uniform Resource Locator", "Universal Resource Load"], correct: 2 },
      { q: "15. Independence year?", a: ["1945", "1946", "1947", "1948"], correct: 2 },
    ];

    function renderQuestions() {
      const qDiv = document.getElementById("questions");
      quizData.forEach((q, idx) => {
        const qBlock = document.createElement("div");
        qBlock.className = "question";
        qBlock.innerHTML = `<h3>${q.q}</h3>`;
        q.a.forEach((opt, i) => {
          qBlock.innerHTML += `<label><input type="radio" name="q${idx}" value="${i}"> ${opt}</label><br>`;
        });
        qDiv.appendChild(qBlock);
      });
    }

    function gradeExam() {
      if (submitted) return false;
      clearInterval(timerInterval);
      submitted = true;

      const form = document.getElementById("examForm");
      const resultDiv = document.getElementById("result");
      let score = 0;

      quizData.forEach((q, idx) => {
        const questionDiv = form.querySelectorAll(".question")[idx];
        const options = form.querySelectorAll(`input[name="q${idx}"]`);
        let selected = null;

        options.forEach(opt => {
          if (opt.checked) selected = parseInt(opt.value);
        });

        const feedback = document.createElement("div");

        if (selected === q.correct) {
          score++;
          feedback.innerHTML = `‚úÖ Your Answer: <strong class="correct-answer">${q.a[selected]}</strong> is Correct`;
        } else if (selected != null) {
          feedback.innerHTML = `
            ‚ùå Your Answer: <strong class="wrong-answer">${q.a[selected]}</strong><br>
            ‚úî <span class="correct-answer">Correct Answer: ${q.a[q.correct]}</span>
          `;
        } else {
          feedback.innerHTML = `
            ‚ùå No Answer Selected<br>
            ‚úî <span class="correct-answer">Correct Answer: ${q.a[q.correct]}</span>
          `;
        }

        questionDiv.appendChild(feedback);
      });

      resultDiv.innerHTML = `‚úÖ You scored <strong>${score} / ${quizData.length}</strong>`;
      return false;
    }

    function toggleDetection() {
      fetch('/toggle_detection')
        .then(res => res.json())
        .then(data => {
          detectionOn = data.status === 'on';
          document.getElementById('toggle-btn').textContent =
            detectionOn ? 'Turn Off Detection' : 'Turn On Detection';
        });
    }

    function saveLog() {
      if (!detectionOn) {
        alert("‚ö†Ô∏è Please TURN ON the camera to save your progress.");
        return;
      }

      fetch('/save_log')
        .then(res => res.text())
        .then(msg => alert(msg));
    }

    function toggleTheme() {
      document.body.classList.toggle('dark');
      document.body.classList.toggle('light');
    }

    function checkAlert() {
      fetch('/get_alert')
        .then(res => res.json())
        .then(data => {
          const banner = document.getElementById('alert-banner');
          const text = document.getElementById('alert-text');
          if (data.alert) {
            text.textContent = data.alert;
            banner.style.display = 'block';
          } else {
            banner.style.display = 'none';
          }
        });
    }

    function startTimer(duration) {
      let timer = duration, minutes, seconds;
      const timerDisplay = document.getElementById("timer");

      timerInterval = setInterval(() => {
        minutes = String(Math.floor(timer / 60)).padStart(2, '0');
        seconds = String(timer % 60).padStart(2, '0');
        timerDisplay.textContent = `Time Left: ${minutes}:${seconds}`;

        if (--timer < 0) {
          gradeExam();
          alert("‚è∞ Time's up! Exam submitted.");
        }
      }, 1000);
    }

    renderQuestions();
    startTimer(300); // 5 minutes
    setInterval(checkAlert, 2000);
  </script>
</body>
</html>
